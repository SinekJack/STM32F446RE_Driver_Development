
07_GPIO_Driver_with_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000654  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  4 .ARM          00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000818  08000818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800081c  0800081c  0001081c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000820  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000820  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b83  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023b  00000000  00000000  000113d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000116b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001db2  00000000  00000000  00011738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000df2  00000000  00000000  000134ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008272  00000000  00000000  000142dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c54e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  0001c5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000800 	.word	0x08000800

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000800 	.word	0x08000800

08000204 <gpio_init>:

#include <stdint.h>
#include "stm32f446xx.h"

void gpio_init(GPIO_Handle_t* pGPIOx)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/*For non-IT*/
	if(pGPIOx->GPIO_PinConfig.mode <= MODE_ANALOG)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	2b03      	cmp	r3, #3
 8000212:	d81f      	bhi.n	8000254 <gpio_init+0x50>
	{
		pGPIOx->pGPIOx->MODER &= ~(3 << (2 * pGPIOx->GPIO_PinConfig.pinNumber));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	2103      	movs	r1, #3
 8000222:	fa01 f303 	lsl.w	r3, r1, r3
 8000226:	43db      	mvns	r3, r3
 8000228:	4619      	mov	r1, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	400a      	ands	r2, r1
 8000230:	601a      	str	r2, [r3, #0]
		pGPIOx->pGPIOx->MODER |= (pGPIOx->GPIO_PinConfig.mode << (2 * pGPIOx->GPIO_PinConfig.pinNumber));
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	795b      	ldrb	r3, [r3, #5]
 800023c:	4619      	mov	r1, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	4619      	mov	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	430a      	orrs	r2, r1
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	e051      	b.n	80002f8 <gpio_init+0xf4>
	}
	else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOx->GPIO_PinConfig.mode == MODE_IT_FT )
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	795b      	ldrb	r3, [r3, #5]
 8000258:	2b04      	cmp	r3, #4
 800025a:	d117      	bne.n	800028c <gpio_init+0x88>
		{
			//1. configure the FTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 800025c:	4b7b      	ldr	r3, [pc, #492]	; (800044c <gpio_init+0x248>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	7912      	ldrb	r2, [r2, #4]
 8000264:	4611      	mov	r1, r2
 8000266:	2201      	movs	r2, #1
 8000268:	408a      	lsls	r2, r1
 800026a:	4611      	mov	r1, r2
 800026c:	4a77      	ldr	r2, [pc, #476]	; (800044c <gpio_init+0x248>)
 800026e:	430b      	orrs	r3, r1
 8000270:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_RTSR &= ~( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 8000272:	4b76      	ldr	r3, [pc, #472]	; (800044c <gpio_init+0x248>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	7912      	ldrb	r2, [r2, #4]
 800027a:	4611      	mov	r1, r2
 800027c:	2201      	movs	r2, #1
 800027e:	408a      	lsls	r2, r1
 8000280:	43d2      	mvns	r2, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a71      	ldr	r2, [pc, #452]	; (800044c <gpio_init+0x248>)
 8000286:	400b      	ands	r3, r1
 8000288:	6093      	str	r3, [r2, #8]
 800028a:	e035      	b.n	80002f8 <gpio_init+0xf4>

		}else if (pGPIOx->GPIO_PinConfig.mode == MODE_IT_RT )
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	795b      	ldrb	r3, [r3, #5]
 8000290:	2b05      	cmp	r3, #5
 8000292:	d117      	bne.n	80002c4 <gpio_init+0xc0>
		{
			//1 . configure the RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 8000294:	4b6d      	ldr	r3, [pc, #436]	; (800044c <gpio_init+0x248>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	7912      	ldrb	r2, [r2, #4]
 800029c:	4611      	mov	r1, r2
 800029e:	2201      	movs	r2, #1
 80002a0:	408a      	lsls	r2, r1
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a69      	ldr	r2, [pc, #420]	; (800044c <gpio_init+0x248>)
 80002a6:	430b      	orrs	r3, r1
 80002a8:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR &= ~( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 80002aa:	4b68      	ldr	r3, [pc, #416]	; (800044c <gpio_init+0x248>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	7912      	ldrb	r2, [r2, #4]
 80002b2:	4611      	mov	r1, r2
 80002b4:	2201      	movs	r2, #1
 80002b6:	408a      	lsls	r2, r1
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a63      	ldr	r2, [pc, #396]	; (800044c <gpio_init+0x248>)
 80002be:	400b      	ands	r3, r1
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	e019      	b.n	80002f8 <gpio_init+0xf4>

		}else if (pGPIOx->GPIO_PinConfig.mode == MODE_IT_FRT )
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	795b      	ldrb	r3, [r3, #5]
 80002c8:	2b06      	cmp	r3, #6
 80002ca:	d115      	bne.n	80002f8 <gpio_init+0xf4>
		{
			//1. configure both FTSR and RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 80002cc:	4b5f      	ldr	r3, [pc, #380]	; (800044c <gpio_init+0x248>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	7912      	ldrb	r2, [r2, #4]
 80002d4:	4611      	mov	r1, r2
 80002d6:	2201      	movs	r2, #1
 80002d8:	408a      	lsls	r2, r1
 80002da:	4611      	mov	r1, r2
 80002dc:	4a5b      	ldr	r2, [pc, #364]	; (800044c <gpio_init+0x248>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR |= ( 1 << pGPIOx->GPIO_PinConfig.pinNumber);
 80002e2:	4b5a      	ldr	r3, [pc, #360]	; (800044c <gpio_init+0x248>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	7912      	ldrb	r2, [r2, #4]
 80002ea:	4611      	mov	r1, r2
 80002ec:	2201      	movs	r2, #1
 80002ee:	408a      	lsls	r2, r1
 80002f0:	4611      	mov	r1, r2
 80002f2:	4a56      	ldr	r2, [pc, #344]	; (800044c <gpio_init+0x248>)
 80002f4:	430b      	orrs	r3, r1
 80002f6:	60d3      	str	r3, [r2, #12]
		}

		}
	/*SYSCFG Configuration*/
	uint8_t port = GPIO_BASEADDR_TO_CODE(pGPIOx->pGPIOx);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a54      	ldr	r2, [pc, #336]	; (8000450 <gpio_init+0x24c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d032      	beq.n	8000368 <gpio_init+0x164>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a53      	ldr	r2, [pc, #332]	; (8000454 <gpio_init+0x250>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d02b      	beq.n	8000364 <gpio_init+0x160>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a51      	ldr	r2, [pc, #324]	; (8000458 <gpio_init+0x254>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d024      	beq.n	8000360 <gpio_init+0x15c>
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a50      	ldr	r2, [pc, #320]	; (800045c <gpio_init+0x258>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d01d      	beq.n	800035c <gpio_init+0x158>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a4e      	ldr	r2, [pc, #312]	; (8000460 <gpio_init+0x25c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d016      	beq.n	8000358 <gpio_init+0x154>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a4d      	ldr	r2, [pc, #308]	; (8000464 <gpio_init+0x260>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d00f      	beq.n	8000354 <gpio_init+0x150>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a4b      	ldr	r2, [pc, #300]	; (8000468 <gpio_init+0x264>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d008      	beq.n	8000350 <gpio_init+0x14c>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a4a      	ldr	r2, [pc, #296]	; (800046c <gpio_init+0x268>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d101      	bne.n	800034c <gpio_init+0x148>
 8000348:	2307      	movs	r3, #7
 800034a:	e00e      	b.n	800036a <gpio_init+0x166>
 800034c:	2300      	movs	r3, #0
 800034e:	e00c      	b.n	800036a <gpio_init+0x166>
 8000350:	2306      	movs	r3, #6
 8000352:	e00a      	b.n	800036a <gpio_init+0x166>
 8000354:	2305      	movs	r3, #5
 8000356:	e008      	b.n	800036a <gpio_init+0x166>
 8000358:	2304      	movs	r3, #4
 800035a:	e006      	b.n	800036a <gpio_init+0x166>
 800035c:	2303      	movs	r3, #3
 800035e:	e004      	b.n	800036a <gpio_init+0x166>
 8000360:	2302      	movs	r3, #2
 8000362:	e002      	b.n	800036a <gpio_init+0x166>
 8000364:	2301      	movs	r3, #1
 8000366:	e000      	b.n	800036a <gpio_init+0x166>
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = pGPIOx->GPIO_PinConfig.pinNumber / 4;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	089b      	lsrs	r3, r3, #2
 8000372:	73bb      	strb	r3, [r7, #14]
	uint8_t temp2 = pGPIOx->GPIO_PinConfig.pinNumber % 4;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	f003 0303 	and.w	r3, r3, #3
 800037c:	737b      	strb	r3, [r7, #13]
	SYSCFG_CLK_EN();
 800037e:	4b3c      	ldr	r3, [pc, #240]	; (8000470 <gpio_init+0x26c>)
 8000380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000382:	4a3b      	ldr	r2, [pc, #236]	; (8000470 <gpio_init+0x26c>)
 8000384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000388:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp] = (port << (4 * temp2));
 800038a:	7bfa      	ldrb	r2, [r7, #15]
 800038c:	7b7b      	ldrb	r3, [r7, #13]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	fa02 f103 	lsl.w	r1, r2, r3
 8000394:	4a37      	ldr	r2, [pc, #220]	; (8000474 <gpio_init+0x270>)
 8000396:	7bbb      	ldrb	r3, [r7, #14]
 8000398:	3302      	adds	r3, #2
 800039a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	/*Output Type*/
	pGPIOx->pGPIOx->OTYPER |= pGPIOx->GPIO_PinConfig.outputType << (pGPIOx->GPIO_PinConfig.pinNumber);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	799b      	ldrb	r3, [r3, #6]
 80003a8:	4619      	mov	r1, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	605a      	str	r2, [r3, #4]
	/*Speed Settings*/
	pGPIOx->pGPIOx->SPEED  |= pGPIOx->GPIO_PinConfig.speed << (2 * pGPIOx->GPIO_PinConfig.pinNumber);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	79db      	ldrb	r3, [r3, #7]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	430a      	orrs	r2, r1
 80003da:	609a      	str	r2, [r3, #8]
	/*Pull up Pull Down Settings*/
	pGPIOx->pGPIOx->PUPD   |= pGPIOx->GPIO_PinConfig.puPd  << (2 * pGPIOx->GPIO_PinConfig.pinNumber);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7a1b      	ldrb	r3, [r3, #8]
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	60da      	str	r2, [r3, #12]
	/*Alternate Function Configuration*/
	if(pGPIOx->GPIO_PinConfig.mode == MODE_AF)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d11d      	bne.n	8000440 <gpio_init+0x23c>
		{
		/*AF High or AF Low Register?*/
		uint8_t temp  = pGPIOx->GPIO_PinConfig.pinNumber / 8;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	733b      	strb	r3, [r7, #12]
		/*Location of pin in alternate func*/
		uint8_t temp2 = pGPIOx->GPIO_PinConfig.pinNumber % 8;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	f003 0307 	and.w	r3, r3, #7
 8000414:	72fb      	strb	r3, [r7, #11]

		pGPIOx->pGPIOx->AFR[temp] |= (pGPIOx->GPIO_PinConfig.alternateFunc << (4 * temp2));
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	7b3a      	ldrb	r2, [r7, #12]
 800041c:	3208      	adds	r2, #8
 800041e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7a5b      	ldrb	r3, [r3, #9]
 8000426:	461a      	mov	r2, r3
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	4618      	mov	r0, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	7b3a      	ldrb	r2, [r7, #12]
 8000438:	4301      	orrs	r1, r0
 800043a:	3208      	adds	r2, #8
 800043c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40013c00 	.word	0x40013c00
 8000450:	40020000 	.word	0x40020000
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021400 	.word	0x40021400
 8000468:	40021800 	.word	0x40021800
 800046c:	40021c00 	.word	0x40021c00
 8000470:	40023800 	.word	0x40023800
 8000474:	40013800 	.word	0x40013800

08000478 <writeToOutput>:
	uint8_t value = (uint8_t)((pGPIOx->IDR >> pinNo) & 0x00000001);
	return value;
}

void writeToOutput(GPIO_RegDef_t* pGPIOx,uint8_t pinNo,uint8_t SetorReset)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
 8000484:	4613      	mov	r3, r2
 8000486:	70bb      	strb	r3, [r7, #2]
	if(SetorReset)
 8000488:	78bb      	ldrb	r3, [r7, #2]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d009      	beq.n	80004a2 <writeToOutput+0x2a>
		pGPIOx->ODR |= (SET << pinNo);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	78fa      	ldrb	r2, [r7, #3]
 8000494:	2101      	movs	r1, #1
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	431a      	orrs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	615a      	str	r2, [r3, #20]
	else
		pGPIOx->ODR &= ~(SET << pinNo);
}
 80004a0:	e009      	b.n	80004b6 <writeToOutput+0x3e>
		pGPIOx->ODR &= ~(SET << pinNo);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	78fa      	ldrb	r2, [r7, #3]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	43d2      	mvns	r2, r2
 80004b0:	401a      	ands	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	615a      	str	r2, [r3, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d133      	bne.n	8000542 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b1f      	cmp	r3, #31
 80004de:	d80a      	bhi.n	80004f6 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80004e0:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <GPIO_IRQInterruptConfig+0xf4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a32      	ldr	r2, [pc, #200]	; (80005b8 <GPIO_IRQInterruptConfig+0xf4>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80004f4:	e059      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b1f      	cmp	r3, #31
 80004fa:	d90f      	bls.n	800051c <GPIO_IRQInterruptConfig+0x58>
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000500:	d80c      	bhi.n	800051c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000502:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <GPIO_IRQInterruptConfig+0xf8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	79fa      	ldrb	r2, [r7, #7]
 8000508:	f002 021f 	and.w	r2, r2, #31
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a29      	ldr	r2, [pc, #164]	; (80005bc <GPIO_IRQInterruptConfig+0xf8>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6013      	str	r3, [r2, #0]
 800051a:	e046      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b3f      	cmp	r3, #63	; 0x3f
 8000520:	d943      	bls.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b5f      	cmp	r3, #95	; 0x5f
 8000526:	d840      	bhi.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <GPIO_IRQInterruptConfig+0xfc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <GPIO_IRQInterruptConfig+0xfc>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	e033      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b1f      	cmp	r3, #31
 8000546:	d80a      	bhi.n	800055e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <GPIO_IRQInterruptConfig+0x100>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	79fa      	ldrb	r2, [r7, #7]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <GPIO_IRQInterruptConfig+0x100>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	e025      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b1f      	cmp	r3, #31
 8000562:	d90f      	bls.n	8000584 <GPIO_IRQInterruptConfig+0xc0>
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b3f      	cmp	r3, #63	; 0x3f
 8000568:	d80c      	bhi.n	8000584 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <GPIO_IRQInterruptConfig+0x104>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	f002 021f 	and.w	r2, r2, #31
 8000574:	2101      	movs	r1, #1
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <GPIO_IRQInterruptConfig+0x104>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e012      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b3f      	cmp	r3, #63	; 0x3f
 8000588:	d90f      	bls.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b5f      	cmp	r3, #95	; 0x5f
 800058e:	d80c      	bhi.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <GPIO_IRQInterruptConfig+0x108>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800059a:	2101      	movs	r1, #1
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <GPIO_IRQInterruptConfig+0x108>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	e7ff      	b.n	80005aa <GPIO_IRQInterruptConfig+0xe6>
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000e104 	.word	0xe000e104
 80005c0:	e000e108 	.word	0xe000e108
 80005c4:	e000e180 	.word	0xe000e180
 80005c8:	e000e184 	.word	0xe000e184
 80005cc:	e000e188 	.word	0xe000e188

080005d0 <GPIO_IRQPriorityConfig>:


void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	089b      	lsrs	r3, r3, #2
 80005e0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - BITS_FOR_NVIC_PRI) ;
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	3304      	adds	r3, #4
 80005f2:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005fc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000600:	6819      	ldr	r1, [r3, #0]
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	409a      	lsls	r2, r3
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000610:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000614:	430a      	orrs	r2, r1
 8000616:	601a      	str	r2, [r3, #0]

}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <GPIO_IRQHandling>:

/*Clearing Pending Bit(this function will be call by handler)*/
void GPIO_IRQHandling(uint8_t pinNumber)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if(EXTI->EXTI_PR & (1 << pinNumber)) //if PR is equal to 1 than clear it.(clearing is done by sending 1)
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	2101      	movs	r1, #1
 8000636:	fa01 f202 	lsl.w	r2, r1, r2
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <GPIO_IRQHandling+0x30>
	{
		EXTI->EXTI_PR |= (1 << pinNumber);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	79fa      	ldrb	r2, [r7, #7]
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	4611      	mov	r1, r2
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6153      	str	r3, [r2, #20]
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40013c00 	.word	0x40013c00

08000664 <main>:
#define LED_PIN_NO		5

void delay(void);

int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
    GPIO_Handle_t Btn,Led;
    /*saving variables from garbage values*/
    memset(&Btn,0,sizeof(Btn));
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	220c      	movs	r2, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8bc 	bl	80007f0 <memset>
    memset(&Led,0,sizeof(Led));
 8000678:	463b      	mov	r3, r7
 800067a:	220c      	movs	r2, #12
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f8b6 	bl	80007f0 <memset>

    Btn.pGPIOx = GPIOC;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <main+0x88>)
 8000686:	60fb      	str	r3, [r7, #12]
    Btn.GPIO_PinConfig.mode      = MODE_IT_FT;
 8000688:	2304      	movs	r3, #4
 800068a:	747b      	strb	r3, [r7, #17]
    Btn.GPIO_PinConfig.pinNumber = PIN_NO_13;
 800068c:	230d      	movs	r3, #13
 800068e:	743b      	strb	r3, [r7, #16]
    Btn.GPIO_PinConfig.speed     = FAST_SPEED;
 8000690:	2302      	movs	r3, #2
 8000692:	74fb      	strb	r3, [r7, #19]

    GPIOC_CLK_EN();
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0x8c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <main+0x8c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
    gpio_init(&Btn);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdad 	bl	8000204 <gpio_init>

    Led.pGPIOx 				     = GPIOA;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x90>)
 80006ac:	603b      	str	r3, [r7, #0]
    Led.GPIO_PinConfig.mode      = MODE_OUTPUT;
 80006ae:	2301      	movs	r3, #1
 80006b0:	717b      	strb	r3, [r7, #5]
    Led.GPIO_PinConfig.pinNumber = PIN_NO_5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	713b      	strb	r3, [r7, #4]
    Led.GPIO_PinConfig.speed     = LOW_SPEED;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]

    GPIOA_CLK_EN();
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <main+0x8c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <main+0x8c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
    gpio_init(&Led);
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd9b 	bl	8000204 <gpio_init>

    writeToOutput(GPIOA, PIN_NO_5, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2105      	movs	r1, #5
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <main+0x90>)
 80006d4:	f7ff fed0 	bl	8000478 <writeToOutput>
    GPIO_IRQPriorityConfig(IRQ_EXTI15_10, 11);
 80006d8:	210b      	movs	r1, #11
 80006da:	2028      	movs	r0, #40	; 0x28
 80006dc:	f7ff ff78 	bl	80005d0 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(IRQ_EXTI15_10, ENABLE);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f7ff feee 	bl	80004c4 <GPIO_IRQInterruptConfig>

    while(1);
 80006e8:	e7fe      	b.n	80006e8 <main+0x84>
 80006ea:	bf00      	nop
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <EXTI15_10_IRQHandler>:

}

void EXTI15_10_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(BTN_PIN_NO);
 80006fc:	200d      	movs	r0, #13
 80006fe:	f7ff ff91 	bl	8000624 <GPIO_IRQHandling>
	writeToOutput(GPIOA, LED_PIN_NO, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2105      	movs	r1, #5
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <EXTI15_10_IRQHandler+0x2c>)
 8000708:	f7ff feb6 	bl	8000478 <writeToOutput>
	delay();
 800070c:	f000 f80c 	bl	8000728 <delay>
	writeToOutput(GPIOA, LED_PIN_NO, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <EXTI15_10_IRQHandler+0x2c>)
 8000716:	f7ff feaf 	bl	8000478 <writeToOutput>
	delay();
 800071a:	f000 f805 	bl	8000728 <delay>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020000 	.word	0x40020000

08000728 <delay>:

void delay(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 500000; i++);
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e002      	b.n	800073a <delay+0x12>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <delay+0x28>)
 800073e:	4293      	cmp	r3, r2
 8000740:	ddf8      	ble.n	8000734 <delay+0xc>
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	0007a11f 	.word	0x0007a11f

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000782:	f000 f811 	bl	80007a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff ff6d 	bl	8000664 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000798:	08000820 	.word	0x08000820
  ldr r2, =_sbss
 800079c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007a0:	2000001c 	.word	0x2000001c

080007a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC_IRQHandler>
	...

080007a8 <__libc_init_array>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	4d0d      	ldr	r5, [pc, #52]	; (80007e0 <__libc_init_array+0x38>)
 80007ac:	4c0d      	ldr	r4, [pc, #52]	; (80007e4 <__libc_init_array+0x3c>)
 80007ae:	1b64      	subs	r4, r4, r5
 80007b0:	10a4      	asrs	r4, r4, #2
 80007b2:	2600      	movs	r6, #0
 80007b4:	42a6      	cmp	r6, r4
 80007b6:	d109      	bne.n	80007cc <__libc_init_array+0x24>
 80007b8:	4d0b      	ldr	r5, [pc, #44]	; (80007e8 <__libc_init_array+0x40>)
 80007ba:	4c0c      	ldr	r4, [pc, #48]	; (80007ec <__libc_init_array+0x44>)
 80007bc:	f000 f820 	bl	8000800 <_init>
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	10a4      	asrs	r4, r4, #2
 80007c4:	2600      	movs	r6, #0
 80007c6:	42a6      	cmp	r6, r4
 80007c8:	d105      	bne.n	80007d6 <__libc_init_array+0x2e>
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d0:	4798      	blx	r3
 80007d2:	3601      	adds	r6, #1
 80007d4:	e7ee      	b.n	80007b4 <__libc_init_array+0xc>
 80007d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007da:	4798      	blx	r3
 80007dc:	3601      	adds	r6, #1
 80007de:	e7f2      	b.n	80007c6 <__libc_init_array+0x1e>
 80007e0:	08000818 	.word	0x08000818
 80007e4:	08000818 	.word	0x08000818
 80007e8:	08000818 	.word	0x08000818
 80007ec:	0800081c 	.word	0x0800081c

080007f0 <memset>:
 80007f0:	4402      	add	r2, r0
 80007f2:	4603      	mov	r3, r0
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d100      	bne.n	80007fa <memset+0xa>
 80007f8:	4770      	bx	lr
 80007fa:	f803 1b01 	strb.w	r1, [r3], #1
 80007fe:	e7f9      	b.n	80007f4 <memset+0x4>

08000800 <_init>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr

0800080c <_fini>:
 800080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080e:	bf00      	nop
 8000810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000812:	bc08      	pop	{r3}
 8000814:	469e      	mov	lr, r3
 8000816:	4770      	bx	lr
